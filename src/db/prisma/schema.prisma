generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar
}

model file {
  uuid       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String   @db.Uuid
  invoice_id String?  @db.Uuid
  created_at DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  mime       String
  filename   String
  body       Bytes
  invoice    invoice? @relation(fields: [invoice_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_file_ref_invoice")
  tenant     tenant   @relation(fields: [tenant_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_file_ref_tenant")
}

model invoice {
  uuid                String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id           String                @db.Uuid
  created_at          DateTime              @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  data                Json                  @default("{}")
  file                file[]
  tenant              tenant                @relation(fields: [tenant_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_invoice_ref_tenant")
  invoice_recognition invoice_recognition[]
  link_tag_to_invoice link_tag_to_invoice[]
}

model invoice_recognition {
  uuid        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id  String    @db.Uuid
  created_at  DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  finished_at DateTime? @db.Timestamp(6)
  recognizer  String    @default("unknown")
  status      String    @default("created")
  data        Json      @default("{}")
  invoice     invoice   @relation(fields: [invoice_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_invoice_recognition_ref_invoice")
}

model link_tag_to_invoice {
  id         BigInt  @id @default(autoincrement())
  tag_id     String  @db.Uuid
  invoice_id String  @db.Uuid
  invoice    invoice @relation(fields: [invoice_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_tag_invoice_jt_ref_invoice")
  tag        tag     @relation(fields: [tag_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_tag_invoice_jt_ref_tag")
}

model tag {
  uuid                String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id           String                @db.Uuid
  title               String
  color               String?
  link_tag_to_invoice link_tag_to_invoice[]
  tenant              tenant                @relation(fields: [tenant_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_tag_ref_tenant")
}

model tenant {
  uuid    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  file    file[]
  invoice invoice[]
  tag     tag[]
}
